import {
  __commonJS,
  __require
} from "./chunk-VUNV25KB.js";

// node_modules/scryfall-sdk/out/IScry.js
var require_IScry = __commonJS({
  "node_modules/scryfall-sdk/out/IScry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IScry = exports.SYMBOL_CARDS = exports.SYMBOL_PRINTS = exports.SYMBOL_RULINGS = exports.SYMBOL_SET = exports.SYMBOL_COST = exports.SYMBOL_TEXT = exports.RESOURCE_GENERIC_CARD_BACK = exports.ENDPOINT_FILE_3 = exports.ENDPOINT_FILE_2 = exports.ENDPOINT_FILE_1 = exports.ENDPOINT_API = void 0;
    exports.ENDPOINT_API = "https://api.scryfall.com";
    exports.ENDPOINT_FILE_1 = "https://cards.scryfall.io";
    exports.ENDPOINT_FILE_2 = "https://c2.scryfall.com/file";
    exports.ENDPOINT_FILE_3 = "https://c3.scryfall.com/file";
    exports.RESOURCE_GENERIC_CARD_BACK = `${exports.ENDPOINT_FILE_2}/scryfall-errors/missing.jpg`;
    exports.SYMBOL_TEXT = Symbol("TEXT");
    exports.SYMBOL_COST = Symbol("COST");
    exports.SYMBOL_SET = Symbol("SET");
    exports.SYMBOL_RULINGS = Symbol("RULINGS");
    exports.SYMBOL_PRINTS = Symbol("PRINTS");
    exports.SYMBOL_CARDS = Symbol("CARDS");
    var Colors;
    (function(Colors2) {
      Colors2[Colors2["W"] = 0] = "W";
      Colors2[Colors2["B"] = 1] = "B";
      Colors2[Colors2["R"] = 2] = "R";
      Colors2[Colors2["U"] = 3] = "U";
      Colors2[Colors2["G"] = 4] = "G";
    })(Colors || (Colors = {}));
    var IScry;
    /* @__PURE__ */ (function(IScry2) {
    })(IScry = exports.IScry || (exports.IScry = {}));
  }
});

// node_modules/scryfall-sdk/out/util/Cached.js
var require_Cached = __commonJS({
  "node_modules/scryfall-sdk/out/util/Cached.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MIN_CACHE_DURATION = 1e3 * 10;
    var DEFAULT_CACHE_DURATION = 1e3 * 60 * 60;
    var configuredCacheDuration = DEFAULT_CACHE_DURATION;
    var MIN_CACHE_LIMIT = 1;
    var DEFAULT_CACHE_LIMIT = 500;
    var configuredCacheLimit = DEFAULT_CACHE_LIMIT;
    var caches = [];
    function Cached(target, key, descriptor) {
      let topCache = { map: /* @__PURE__ */ new Map(), time: 0 };
      return {
        value(...args) {
          let cache = topCache;
          let shouldCache = false;
          if (configuredCacheDuration >= MIN_CACHE_DURATION && configuredCacheLimit >= MIN_CACHE_LIMIT) {
            let now = Date.now();
            for (let i = 0; i < args.length; i++) {
              const arg = args[i];
              let nextCache = cache.map.get(arg);
              if (!nextCache) {
                nextCache = { key: arg, map: /* @__PURE__ */ new Map(), time: 0 };
                cache.map.set(arg, nextCache);
                nextCache.parent = cache;
              }
              cache = nextCache;
            }
            if (now - cache.time < configuredCacheDuration)
              return cache.value;
            cache.time = now;
            shouldCache = true;
          }
          const result = descriptor.value.apply(this, args);
          if (shouldCache) {
            cache.value = result;
            caches.push(cache);
            while (caches.length > configuredCacheLimit)
              deleteCacheValue(caches.shift());
            handleCacheGarbageCollection(false);
          }
          return result;
        }
      };
    }
    function deleteCacheValue(cache) {
      var _a;
      delete cache.value;
      if (cache.map.size === 0)
        (_a = cache.parent) === null || _a === void 0 ? void 0 : _a.map.delete(cache.key);
    }
    var garbageCollectionTimer;
    function handleCacheGarbageCollection(reset) {
      if (!reset && garbageCollectionTimer !== void 0)
        return;
      if (garbageCollectionTimer !== void 0 && reset)
        clearInterval(garbageCollectionTimer);
      if (configuredCacheDuration < MIN_CACHE_DURATION || configuredCacheLimit < MIN_CACHE_LIMIT) {
        caches.forEach(deleteCacheValue);
        caches = [];
        return;
      }
      garbageCollectionTimer = setInterval(() => {
        const now = Date.now();
        let newCaches = caches;
        for (let i = 0; i < caches.length; i++) {
          const cache = caches[i];
          if (now - cache.time > configuredCacheDuration) {
            deleteCacheValue(cache);
            newCaches = [];
          } else {
            if (i)
              newCaches = caches.slice(i);
            break;
          }
        }
        caches = newCaches;
        if (caches.length === 0 && garbageCollectionTimer !== void 0) {
          clearInterval(garbageCollectionTimer);
          garbageCollectionTimer = void 0;
        }
      }, Math.sqrt(configuredCacheDuration / 1e3) * 2e3);
    }
    (function(Cached2) {
      function getObjectsCount() {
        return caches.length;
      }
      Cached2.getObjectsCount = getObjectsCount;
      function isGarbageCollectorRunning() {
        return garbageCollectionTimer !== void 0;
      }
      Cached2.isGarbageCollectorRunning = isGarbageCollectorRunning;
      function clear() {
        caches.forEach(deleteCacheValue);
        caches = [];
      }
      Cached2.clear = clear;
      function resetCacheDuration() {
        setDuration(DEFAULT_CACHE_DURATION);
      }
      Cached2.resetCacheDuration = resetCacheDuration;
      function setDuration(ms) {
        if (configuredCacheDuration !== ms) {
          configuredCacheDuration = ms;
          handleCacheGarbageCollection(true);
        }
      }
      Cached2.setDuration = setDuration;
      function resetLimit() {
        setLimit(DEFAULT_CACHE_LIMIT);
      }
      Cached2.resetLimit = resetLimit;
      function setLimit(count) {
        configuredCacheLimit = count;
        while (caches.length > configuredCacheLimit)
          deleteCacheValue(caches.shift());
        handleCacheGarbageCollection(true);
      }
      Cached2.setLimit = setLimit;
    })(Cached || (Cached = {}));
    exports.default = Cached;
  }
});

// node_modules/scryfall-sdk/out/util/EventEmitter.js
var require_EventEmitter = __commonJS({
  "node_modules/scryfall-sdk/out/util/EventEmitter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EMPTY = [];
    var EventEmitter = class {
      constructor() {
        this._maxListeners = 10;
        this._listeners = {};
      }
      addListener(eventName, listener) {
        var _a;
        var _b;
        const listeners = (_a = (_b = this._listeners)[eventName]) !== null && _a !== void 0 ? _a : _b[eventName] = [];
        listeners.push(listener);
        if (listeners.length > this._maxListeners)
          console.warn(`MaxListenersExceededWarning: Possible EventEmitter memory leak detected. ${listeners.length} ${eventName.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`);
        return this;
      }
      prependListener(eventName, listener) {
        var _a;
        var _b;
        const listeners = (_a = (_b = this._listeners)[eventName]) !== null && _a !== void 0 ? _a : _b[eventName] = [];
        listeners.unshift(listener);
        if (listeners.length > this._maxListeners)
          console.warn(`MaxListenersExceededWarning: Possible EventEmitter memory leak detected. ${listeners.length} ${eventName.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`);
        return this;
      }
      removeListener(eventName, listener) {
        const listeners = this._listeners[eventName];
        if (listeners) {
          const index = listeners.indexOf(listener);
          if (index >= 0) {
            if (listeners.length === 1)
              delete this._listeners[eventName];
            else
              listeners.splice(index, 1);
          }
        }
        return this;
      }
      on(eventName, listener) {
        this.addListener(eventName, listener);
        return this;
      }
      once(eventName, listener) {
        const realListener = (...args) => {
          this.removeListener(eventName, realListener);
          listener(...args);
        };
        this.addListener(eventName, realListener);
        return this;
      }
      prependOnceListener(eventName, listener) {
        const realListener = (...args) => {
          this.removeListener(eventName, realListener);
          listener(...args);
        };
        this.prependListener(eventName, realListener);
        return this;
      }
      off(eventName, listener) {
        this.removeListener(eventName, listener);
        return this;
      }
      removeAllListeners(event) {
        if (event !== void 0)
          delete this._listeners[event];
        return this;
      }
      emit(eventName, ...args) {
        for (const listener of this._listeners[eventName])
          listener(...args);
        return true;
      }
      setMaxListeners(n) {
        this._maxListeners = n;
        return this;
      }
      getMaxListeners() {
        return this._maxListeners;
      }
      listeners(eventName) {
        const listeners = this._listeners[eventName];
        return listeners ? [...listeners] : EMPTY;
      }
      rawListeners(eventName) {
        throw new Error("The rawListeners method is not available using this polyfill");
      }
      listenerCount(eventName) {
        var _a, _b;
        return (_b = (_a = this._listeners[eventName]) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
      }
      eventNames() {
        return Object.keys(this._listeners);
      }
    };
    exports.default = EventEmitter;
  }
});

// node_modules/scryfall-sdk/out/util/MagicEmitter.js
var require_MagicEmitter = __commonJS({
  "node_modules/scryfall-sdk/out/util/MagicEmitter.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __await = exports && exports.__await || function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    var __asyncGenerator = exports && exports.__asyncGenerator || function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n]) i[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var EventEmitter_1 = require_EventEmitter();
    var MagicEmitter = class extends EventEmitter_1.default {
      get ended() {
        return this._ended;
      }
      get cancelled() {
        return this._cancelled;
      }
      get willCancelAfterPage() {
        return this._willCancelAfterPage;
      }
      constructor() {
        super();
        this._ended = false;
        this._cancelled = false;
        this._willCancelAfterPage = false;
        this.mappers = [];
        this.on("end", () => {
          this._ended = true;
        });
        this.on("cancel", () => {
          this._ended = true;
        });
      }
      on(event, listener) {
        super.on(event, listener);
        return this;
      }
      emit(event, ...data) {
        if (event === "data")
          return super.emit(event, this.mappers.reduce((current, mapper) => mapper(current), data[0]));
        return super.emit(event, ...data);
      }
      emitAll(event, ...data) {
        for (const item of data) {
          super.emit(event, event !== "data" ? item : this.mappers.reduce((current, mapper) => mapper(current), item));
          if (this._cancelled)
            break;
        }
      }
      cancel() {
        this._cancelled = true;
        this.emit("cancel");
        return this;
      }
      cancelAfterPage() {
        this._willCancelAfterPage = true;
        return this;
      }
      waitForAll() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            const results = [];
            results.not_found = [];
            this.on("data", (result) => {
              results.push(result);
            });
            this.on("not_found", (notFound) => {
              results.not_found.push(notFound);
            });
            this.on("done", () => resolve(results));
            this.on("error", reject);
          });
        });
      }
      [Symbol.asyncIterator]() {
        return this.generate("data");
      }
      all() {
        return this.generate("data");
      }
      notFound() {
        return this.generate("not_found");
      }
      map(mapper) {
        this.mappers.push(mapper);
        return this;
      }
      generate(event) {
        return __asyncGenerator(this, arguments, function* generate_1() {
          const unyielded = [];
          this.on(event, (data) => unyielded.push(data));
          while (!this._ended) {
            yield __await(new Promise((resolve) => this.once(event, resolve)));
            let data;
            while (data = unyielded.shift())
              yield yield __await(data);
          }
        });
      }
    };
    exports.default = MagicEmitter;
  }
});

// node_modules/scryfall-sdk/out/util/MagicQuerier.js
var require_MagicQuerier = __commonJS({
  "node_modules/scryfall-sdk/out/util/MagicQuerier.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.minimumRequestTimeout = exports.defaultRequestTimeout = void 0;
    var IScry_1 = require_IScry();
    var axios;
    if (typeof fetch === "undefined") {
      try {
        axios = __require("axios").default;
      } catch (_a) {
        throw new Error("[scryfall-sdk] If the global `fetch` function is undefined (any node.js version older than v18), the axios peerDependency is required.");
      }
    }
    exports.defaultRequestTimeout = 100;
    exports.minimumRequestTimeout = 50;
    var lastQuery = 0;
    function sleep(ms = 0) {
      return new Promise((resolve) => setTimeout(resolve, ms));
    }
    var MagicQuerier = class _MagicQuerier {
      query(apiPath, query, post) {
        return __awaiter(this, void 0, void 0, function* () {
          if (Array.isArray(apiPath))
            apiPath = apiPath.join("/");
          let lastError;
          let result;
          let retries;
          for (retries = 0; retries < _MagicQuerier.retry.attempts; retries++) {
            ({ result, lastError } = yield this.tryQuery(`${apiPath}`, query, post));
            if (result || !this.canRetry(lastError) && !_MagicQuerier.retry.forced)
              break;
            yield sleep(_MagicQuerier.retry.timeout);
          }
          if (!result) {
            lastError !== null && lastError !== void 0 ? lastError : lastError = new Error("No data");
            lastError.attempts = retries;
            throw lastError;
          }
          return result;
        });
      }
      queryPage(emitter, apiPath, query, page) {
        var _a, _b;
        if (page === void 0) {
          page = (_a = query === null || query === void 0 ? void 0 : query.page) !== null && _a !== void 0 ? _a : 1;
        }
        return __awaiter(this, void 0, void 0, function* () {
          let error;
          const results = yield this.query(apiPath, Object.assign(Object.assign({}, query), { page })).catch((err) => error = err);
          const data = (_b = results === null || results === void 0 ? void 0 : results.data) !== null && _b !== void 0 ? _b : [];
          if ((results === null || results === void 0 ? void 0 : results.object) !== "list" && error === void 0) {
            emitter.emit("error", new Error("Result object is not a list"));
            return;
          }
          for (const card of data) {
            if (emitter.cancelled)
              break;
            emitter.emit("data", card);
          }
          if ((results === null || results === void 0 ? void 0 : results.has_more) && data.length !== 0) {
            if (!emitter.cancelled) {
              if (emitter.willCancelAfterPage)
                emitter.cancel();
              else
                return this.queryPage(emitter, apiPath, query, page + 1).catch((err) => {
                  emitter.emit("error", err);
                });
            }
          }
          if (!emitter.cancelled)
            emitter.emit("end");
          emitter.emit("done");
        });
      }
      tryQuery(apiPath, query, post) {
        return __awaiter(this, void 0, void 0, function* () {
          const now = Date.now();
          const timeSinceLastQuery = now - lastQuery;
          if (timeSinceLastQuery >= _MagicQuerier.timeout) {
            lastQuery = now;
          } else {
            const timeUntilNextQuery = _MagicQuerier.timeout - timeSinceLastQuery;
            lastQuery += timeUntilNextQuery;
            yield sleep(timeUntilNextQuery);
          }
          _MagicQuerier.requestCount++;
          if (axios)
            return this.queryAxios(apiPath, query, post);
          else
            return this.queryFetch(apiPath, query, post);
        });
      }
      queryFetch(apiPath, query, post) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
          const cleanParams = {};
          for (const [key, value] of Object.entries(query !== null && query !== void 0 ? query : {}))
            if (value !== void 0)
              cleanParams[key] = value;
          const searchParams = query ? `?${new URLSearchParams(cleanParams).toString()}` : "";
          const url = `${IScry_1.ENDPOINT_API}/${apiPath}` + searchParams;
          let result = yield fetch(url, {
            body: JSON.stringify(post),
            headers: {
              "Content-Type": "application/json"
            },
            method: post ? "POST" : "GET"
          });
          let lastError;
          if (result !== void 0 && !result.ok) {
            const error = yield result.json();
            lastError = new Error((_a = error.details) !== null && _a !== void 0 ? _a : error.code);
            Object.assign(lastError, error);
            result = void 0;
          }
          return { result: yield result === null || result === void 0 ? void 0 : result.json(), lastError };
        });
      }
      queryAxios(apiPath, query, post) {
        return __awaiter(this, void 0, void 0, function* () {
          let lastError;
          const result = (yield axios.request({
            data: post,
            method: post ? "POST" : "GET",
            params: query,
            url: `${IScry_1.ENDPOINT_API}/${apiPath}`
          }).catch(({ response }) => {
            var _a;
            const error = response.data;
            lastError = new Error((_a = error.details) !== null && _a !== void 0 ? _a : error.code);
            Object.assign(lastError, response.data);
          })) || void 0;
          return { result: result === null || result === void 0 ? void 0 : result.data, lastError };
        });
      }
      canRetry(error) {
        if (error.code === "not_found" || error.code === "bad_request")
          return false;
        return !_MagicQuerier.retry.canRetry || _MagicQuerier.retry.canRetry(error);
      }
    };
    exports.default = MagicQuerier;
    MagicQuerier.lastQuery = 0;
    MagicQuerier.retry = { attempts: 1 };
    MagicQuerier.timeout = exports.defaultRequestTimeout;
    MagicQuerier.requestCount = 0;
  }
});

// node_modules/scryfall-sdk/out/api/Cards.js
var require_Cards = __commonJS({
  "node_modules/scryfall-sdk/out/api/Cards.js"(exports) {
    "use strict";
    var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Card = exports.CardIdentifier = exports.CardSecurityStamp = exports.CardStatus = exports.CardFrame = exports.CardFinish = exports.PromoType = exports.RelatedCard = exports.RelatedCardComponent = exports.Format = exports.Layout = exports.Border = exports.Legality = exports.Game = exports.FrameEffect = exports.Rarity = exports.SortDirection = exports.Sort = exports.UniqueStrategy = void 0;
    var IScry_1 = require_IScry();
    var Cached_1 = require_Cached();
    var MagicEmitter_1 = require_MagicEmitter();
    var MagicQuerier_1 = require_MagicQuerier();
    var UniqueStrategy;
    (function(UniqueStrategy2) {
      UniqueStrategy2[UniqueStrategy2["cards"] = 0] = "cards";
      UniqueStrategy2[UniqueStrategy2["art"] = 1] = "art";
      UniqueStrategy2[UniqueStrategy2["prints"] = 2] = "prints";
    })(UniqueStrategy = exports.UniqueStrategy || (exports.UniqueStrategy = {}));
    var Sort;
    (function(Sort2) {
      Sort2[Sort2["name"] = 0] = "name";
      Sort2[Sort2["set"] = 1] = "set";
      Sort2[Sort2["released"] = 2] = "released";
      Sort2[Sort2["rarity"] = 3] = "rarity";
      Sort2[Sort2["color"] = 4] = "color";
      Sort2[Sort2["usd"] = 5] = "usd";
      Sort2[Sort2["tix"] = 6] = "tix";
      Sort2[Sort2["eur"] = 7] = "eur";
      Sort2[Sort2["cmc"] = 8] = "cmc";
      Sort2[Sort2["power"] = 9] = "power";
      Sort2[Sort2["toughness"] = 10] = "toughness";
      Sort2[Sort2["edhrec"] = 11] = "edhrec";
      Sort2[Sort2["artist"] = 12] = "artist";
    })(Sort = exports.Sort || (exports.Sort = {}));
    var SortDirection;
    (function(SortDirection2) {
      SortDirection2[SortDirection2["auto"] = 0] = "auto";
      SortDirection2[SortDirection2["asc"] = 1] = "asc";
      SortDirection2[SortDirection2["desc"] = 2] = "desc";
    })(SortDirection = exports.SortDirection || (exports.SortDirection = {}));
    var Rarity;
    (function(Rarity2) {
      Rarity2[Rarity2["common"] = 0] = "common";
      Rarity2[Rarity2["uncommon"] = 1] = "uncommon";
      Rarity2[Rarity2["rare"] = 2] = "rare";
      Rarity2[Rarity2["special"] = 3] = "special";
      Rarity2[Rarity2["mythic"] = 4] = "mythic";
      Rarity2[Rarity2["bonus"] = 5] = "bonus";
    })(Rarity = exports.Rarity || (exports.Rarity = {}));
    var FrameEffect;
    (function(FrameEffect2) {
      FrameEffect2[FrameEffect2["legendary"] = 0] = "legendary";
      FrameEffect2[FrameEffect2["miracle"] = 1] = "miracle";
      FrameEffect2[FrameEffect2["nyxtouched"] = 2] = "nyxtouched";
      FrameEffect2[FrameEffect2["draft"] = 3] = "draft";
      FrameEffect2[FrameEffect2["devoid"] = 4] = "devoid";
      FrameEffect2[FrameEffect2["tombstone"] = 5] = "tombstone";
      FrameEffect2[FrameEffect2["colorshifted"] = 6] = "colorshifted";
      FrameEffect2[FrameEffect2["inverted"] = 7] = "inverted";
      FrameEffect2[FrameEffect2["sunmoondfc"] = 8] = "sunmoondfc";
      FrameEffect2[FrameEffect2["compasslanddfc"] = 9] = "compasslanddfc";
      FrameEffect2[FrameEffect2["originpwdfc"] = 10] = "originpwdfc";
      FrameEffect2[FrameEffect2["mooneldrazidfc"] = 11] = "mooneldrazidfc";
      FrameEffect2[FrameEffect2["moonreversemoondfc"] = 12] = "moonreversemoondfc";
      FrameEffect2[FrameEffect2["showcase"] = 13] = "showcase";
      FrameEffect2[FrameEffect2["extendedart"] = 14] = "extendedart";
      FrameEffect2[FrameEffect2["companion"] = 15] = "companion";
      FrameEffect2[FrameEffect2["etched"] = 16] = "etched";
      FrameEffect2[FrameEffect2["snow"] = 17] = "snow";
      FrameEffect2[FrameEffect2["lesson"] = 18] = "lesson";
      FrameEffect2[FrameEffect2["shatteredglass"] = 19] = "shatteredglass";
      FrameEffect2[FrameEffect2["convertdfc"] = 20] = "convertdfc";
      FrameEffect2[FrameEffect2["fandfc"] = 21] = "fandfc";
      FrameEffect2[FrameEffect2["upsidedowndfc"] = 22] = "upsidedowndfc";
    })(FrameEffect = exports.FrameEffect || (exports.FrameEffect = {}));
    var Game;
    (function(Game2) {
      Game2[Game2["paper"] = 0] = "paper";
      Game2[Game2["arena"] = 1] = "arena";
      Game2[Game2["mtgo"] = 2] = "mtgo";
    })(Game = exports.Game || (exports.Game = {}));
    var Legality;
    (function(Legality2) {
      Legality2[Legality2["legal"] = 0] = "legal";
      Legality2[Legality2["not_legal"] = 1] = "not_legal";
      Legality2[Legality2["restricted"] = 2] = "restricted";
      Legality2[Legality2["banned"] = 3] = "banned";
    })(Legality = exports.Legality || (exports.Legality = {}));
    var Border;
    (function(Border2) {
      Border2[Border2["black"] = 0] = "black";
      Border2[Border2["borderless"] = 1] = "borderless";
      Border2[Border2["gold"] = 2] = "gold";
      Border2[Border2["silver"] = 3] = "silver";
      Border2[Border2["white"] = 4] = "white";
    })(Border = exports.Border || (exports.Border = {}));
    var Layout;
    (function(Layout2) {
      Layout2[Layout2["normal"] = 0] = "normal";
      Layout2[Layout2["split"] = 1] = "split";
      Layout2[Layout2["flip"] = 2] = "flip";
      Layout2[Layout2["transform"] = 3] = "transform";
      Layout2[Layout2["modal_dfc"] = 4] = "modal_dfc";
      Layout2[Layout2["meld"] = 5] = "meld";
      Layout2[Layout2["leveler"] = 6] = "leveler";
      Layout2[Layout2["saga"] = 7] = "saga";
      Layout2[Layout2["adventure"] = 8] = "adventure";
      Layout2[Layout2["planar"] = 9] = "planar";
      Layout2[Layout2["scheme"] = 10] = "scheme";
      Layout2[Layout2["vanguard"] = 11] = "vanguard";
      Layout2[Layout2["token"] = 12] = "token";
      Layout2[Layout2["double_faced_token"] = 13] = "double_faced_token";
      Layout2[Layout2["emblem"] = 14] = "emblem";
      Layout2[Layout2["augment"] = 15] = "augment";
      Layout2[Layout2["host"] = 16] = "host";
      Layout2[Layout2["art_series"] = 17] = "art_series";
      Layout2[Layout2["double_sided"] = 18] = "double_sided";
    })(Layout = exports.Layout || (exports.Layout = {}));
    var Format;
    (function(Format2) {
      Format2[Format2["standard"] = 0] = "standard";
      Format2[Format2["future"] = 1] = "future";
      Format2[Format2["historic"] = 2] = "historic";
      Format2[Format2["gladiator"] = 3] = "gladiator";
      Format2[Format2["pioneer"] = 4] = "pioneer";
      Format2[Format2["explorer"] = 5] = "explorer";
      Format2[Format2["modern"] = 6] = "modern";
      Format2[Format2["legacy"] = 7] = "legacy";
      Format2[Format2["pauper"] = 8] = "pauper";
      Format2[Format2["vintage"] = 9] = "vintage";
      Format2[Format2["penny"] = 10] = "penny";
      Format2[Format2["commander"] = 11] = "commander";
      Format2[Format2["oathbreaker"] = 12] = "oathbreaker";
      Format2[Format2["brawl"] = 13] = "brawl";
      Format2[Format2["historicbrawl"] = 14] = "historicbrawl";
      Format2[Format2["alchemy"] = 15] = "alchemy";
      Format2[Format2["paupercommander"] = 16] = "paupercommander";
      Format2[Format2["duel"] = 17] = "duel";
      Format2[Format2["premodern"] = 18] = "premodern";
      Format2[Format2["oldschool"] = 19] = "oldschool";
    })(Format = exports.Format || (exports.Format = {}));
    var RelatedCardComponent;
    (function(RelatedCardComponent2) {
      RelatedCardComponent2[RelatedCardComponent2["token"] = 0] = "token";
      RelatedCardComponent2[RelatedCardComponent2["meld_part"] = 1] = "meld_part";
      RelatedCardComponent2[RelatedCardComponent2["meld_result"] = 2] = "meld_result";
      RelatedCardComponent2[RelatedCardComponent2["combo_piece"] = 3] = "combo_piece";
    })(RelatedCardComponent = exports.RelatedCardComponent || (exports.RelatedCardComponent = {}));
    var Scry;
    var SYMBOL_CARD = Symbol("CARD");
    var RelatedCard = class _RelatedCard {
      static construct(card) {
        Object.setPrototypeOf(card, _RelatedCard.prototype);
        return card;
      }
      get() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
          return (_a = this[SYMBOL_CARD]) !== null && _a !== void 0 ? _a : this[SYMBOL_CARD] = yield Scry.Cards.byId(this.id);
        });
      }
    };
    exports.RelatedCard = RelatedCard;
    var PromoType;
    (function(PromoType2) {
      PromoType2[PromoType2["tourney"] = 0] = "tourney";
      PromoType2[PromoType2["prerelease"] = 1] = "prerelease";
      PromoType2[PromoType2["datestamped"] = 2] = "datestamped";
      PromoType2[PromoType2["planeswalkerdeck"] = 3] = "planeswalkerdeck";
      PromoType2[PromoType2["buyabox"] = 4] = "buyabox";
      PromoType2[PromoType2["judgegift"] = 5] = "judgegift";
      PromoType2[PromoType2["event"] = 6] = "event";
      PromoType2[PromoType2["convention"] = 7] = "convention";
      PromoType2[PromoType2["starterdeck"] = 8] = "starterdeck";
      PromoType2[PromoType2["instore"] = 9] = "instore";
      PromoType2[PromoType2["setpromo"] = 10] = "setpromo";
      PromoType2[PromoType2["fnm"] = 11] = "fnm";
      PromoType2[PromoType2["openhouse"] = 12] = "openhouse";
      PromoType2[PromoType2["league"] = 13] = "league";
      PromoType2[PromoType2["draftweekend"] = 14] = "draftweekend";
      PromoType2[PromoType2["gameday"] = 15] = "gameday";
      PromoType2[PromoType2["release"] = 16] = "release";
      PromoType2[PromoType2["intropack"] = 17] = "intropack";
      PromoType2[PromoType2["giftbox"] = 18] = "giftbox";
      PromoType2[PromoType2["duels"] = 19] = "duels";
      PromoType2[PromoType2["wizardsplaynetwork"] = 20] = "wizardsplaynetwork";
      PromoType2[PromoType2["premiereshop"] = 21] = "premiereshop";
      PromoType2[PromoType2["playerrewards"] = 22] = "playerrewards";
      PromoType2[PromoType2["gateway"] = 23] = "gateway";
      PromoType2[PromoType2["arenaleague"] = 24] = "arenaleague";
    })(PromoType = exports.PromoType || (exports.PromoType = {}));
    var CardFinish;
    (function(CardFinish2) {
      CardFinish2[CardFinish2["foil"] = 0] = "foil";
      CardFinish2[CardFinish2["nonfoil"] = 1] = "nonfoil";
      CardFinish2[CardFinish2["etched"] = 2] = "etched";
      CardFinish2[CardFinish2["glossy"] = 3] = "glossy";
    })(CardFinish = exports.CardFinish || (exports.CardFinish = {}));
    exports.CardFrame = {
      "1993": 0,
      "1997": 1,
      "2003": 2,
      "2015": 3,
      "Future": 4
    };
    var CardStatus;
    (function(CardStatus2) {
      CardStatus2[CardStatus2["missing"] = 0] = "missing";
      CardStatus2[CardStatus2["placeholder"] = 1] = "placeholder";
      CardStatus2[CardStatus2["lowres"] = 2] = "lowres";
      CardStatus2[CardStatus2["highres_scan"] = 3] = "highres_scan";
    })(CardStatus = exports.CardStatus || (exports.CardStatus = {}));
    var CardSecurityStamp;
    (function(CardSecurityStamp2) {
      CardSecurityStamp2[CardSecurityStamp2["oval"] = 0] = "oval";
      CardSecurityStamp2[CardSecurityStamp2["triangle"] = 1] = "triangle";
      CardSecurityStamp2[CardSecurityStamp2["acorn"] = 2] = "acorn";
      CardSecurityStamp2[CardSecurityStamp2["circle"] = 3] = "circle";
      CardSecurityStamp2[CardSecurityStamp2["arena"] = 4] = "arena";
      CardSecurityStamp2[CardSecurityStamp2["heart"] = 5] = "heart";
    })(CardSecurityStamp = exports.CardSecurityStamp || (exports.CardSecurityStamp = {}));
    var CardIdentifier;
    (function(CardIdentifier2) {
      function byId(id) {
        return { id };
      }
      CardIdentifier2.byId = byId;
      function byMtgoId(id) {
        return { mtgo_id: id };
      }
      CardIdentifier2.byMtgoId = byMtgoId;
      function byMultiverseId(id) {
        return { multiverse_id: id };
      }
      CardIdentifier2.byMultiverseId = byMultiverseId;
      function byOracleId(id) {
        return { oracle_id: id };
      }
      CardIdentifier2.byOracleId = byOracleId;
      function byIllustrationId(id) {
        return { illustration_id: id };
      }
      CardIdentifier2.byIllustrationId = byIllustrationId;
      function byName(name, set) {
        return { name, set };
      }
      CardIdentifier2.byName = byName;
      function bySet(set, collectorNumber) {
        return { collector_number: `${collectorNumber}`, set };
      }
      CardIdentifier2.bySet = bySet;
    })(CardIdentifier = exports.CardIdentifier || (exports.CardIdentifier = {}));
    var symbologyTransformer;
    var REGEX_SYMBOLOGY = /{([a-z]|\d+)(?:\/([a-z]))?}/gi;
    function transform(self, key, map) {
      const text = self[key];
      if (!text || !symbologyTransformer)
        return text;
      const transformerKey = typeof symbologyTransformer === "string" ? new String(symbologyTransformer) : symbologyTransformer;
      const value = map.get(transformerKey);
      if (value)
        return value;
      const transformed = typeof symbologyTransformer === "string" ? text.replace(REGEX_SYMBOLOGY, symbologyTransformer) : text.replace(REGEX_SYMBOLOGY, (_, type1, type2) => symbologyTransformer(type1, type2 !== null && type2 !== void 0 ? type2 : ""));
      map.set(transformerKey, transformed);
      return transformed;
    }
    var Card = class _Card {
      static construct(card) {
        var _a;
        Object.setPrototypeOf(card, _Card.prototype);
        if (!card.card_faces)
          card.card_faces = [{ object: "card_face" }];
        for (const face of card.card_faces)
          Object.setPrototypeOf(face, card);
        (_a = card.all_parts) === null || _a === void 0 ? void 0 : _a.forEach(RelatedCard.construct);
        return card;
      }
      getSet() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
          return (_a = this[IScry_1.SYMBOL_SET]) !== null && _a !== void 0 ? _a : this[IScry_1.SYMBOL_SET] = yield Scry.Sets.byId(this.set);
        });
      }
      getRulings() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
          return (_a = this[IScry_1.SYMBOL_RULINGS]) !== null && _a !== void 0 ? _a : this[IScry_1.SYMBOL_RULINGS] = yield Scry.Rulings.byId(this.id);
        });
      }
      getPrints() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
          if (!this[IScry_1.SYMBOL_PRINTS]) {
            this[IScry_1.SYMBOL_PRINTS] = yield Scry.Cards.search(`oracleid:${this.oracle_id}`, { unique: "prints" }).waitForAll();
            for (const card of this[IScry_1.SYMBOL_PRINTS]) {
              (_a = card[IScry_1.SYMBOL_SET]) !== null && _a !== void 0 ? _a : card[IScry_1.SYMBOL_SET] = this[IScry_1.SYMBOL_SET];
              (_b = card[IScry_1.SYMBOL_RULINGS]) !== null && _b !== void 0 ? _b : card[IScry_1.SYMBOL_RULINGS] = this[IScry_1.SYMBOL_RULINGS];
              (_c = card[IScry_1.SYMBOL_PRINTS]) !== null && _c !== void 0 ? _c : card[IScry_1.SYMBOL_PRINTS] = this[IScry_1.SYMBOL_PRINTS];
            }
          }
          return this[IScry_1.SYMBOL_PRINTS];
        });
      }
      getTokens() {
        return !this.all_parts ? [] : this.all_parts.filter((part) => part.component === "token");
      }
      /**
       * @returns `true` if this card is `legal` or `restricted` in the given format.
       */
      isLegal(format) {
        return this.legalities[format] === "legal" || this.legalities[format] === "restricted";
      }
      /**
       * @returns `true` if this card is `not_legal` or `banned` in the given format.
       */
      isIllegal(format) {
        return this.legalities[format] === "not_legal" || this.legalities[format] === "banned";
      }
      /**
       * @returns The `oracle_text` of this card, with symbols transformed by the transformer as set by @see {@link Cards.setSymbologyTransformer}
       */
      getText() {
        if (!this.hasOwnProperty(IScry_1.SYMBOL_TEXT))
          this[IScry_1.SYMBOL_TEXT] = /* @__PURE__ */ new WeakMap();
        return transform(this, "oracle_text", this[IScry_1.SYMBOL_TEXT]);
      }
      /**
       * @returns The `mana_cost` of this card, with symbols transformed by the transformer as set by @see {@link Cards.setSymbologyTransformer}
       */
      getCost() {
        if (!this.hasOwnProperty(IScry_1.SYMBOL_COST))
          this[IScry_1.SYMBOL_COST] = /* @__PURE__ */ new WeakMap();
        return transform(this, "mana_cost", this[IScry_1.SYMBOL_COST]);
      }
      getImageURI(version) {
        var _a, _b, _c;
        return (_b = (_a = this.image_uris) === null || _a === void 0 ? void 0 : _a[version]) !== null && _b !== void 0 ? _b : (_c = this.card_faces[0].image_uris) === null || _c === void 0 ? void 0 : _c[version];
      }
      getFrontImageURI(version) {
        var _a, _b, _c;
        return (_b = (_a = this.card_faces[0].image_uris) === null || _a === void 0 ? void 0 : _a[version]) !== null && _b !== void 0 ? _b : (_c = this.image_uris) === null || _c === void 0 ? void 0 : _c[version];
      }
      getBackImageURI(version) {
        var _a, _b;
        return this.layout !== "transform" && this.layout !== "double_faced_token" ? IScry_1.RESOURCE_GENERIC_CARD_BACK : (_b = (_a = this.card_faces[1].image_uris) === null || _a === void 0 ? void 0 : _a[version]) !== null && _b !== void 0 ? _b : IScry_1.RESOURCE_GENERIC_CARD_BACK;
      }
    };
    exports.Card = Card;
    var Cards = class extends MagicQuerier_1.default {
      set Scry(scry) {
        Scry = scry;
      }
      setSymbologyTransformer(transformer) {
        symbologyTransformer = transformer;
        return this;
      }
      byName(name, set, fuzzy = false) {
        return __awaiter(this, void 0, void 0, function* () {
          if (typeof set === "boolean") {
            fuzzy = set;
            set = void 0;
          }
          const promise = this.queryCard("cards/named", {
            [fuzzy ? "fuzzy" : "exact"]: name,
            set
          });
          return promise;
        });
      }
      byId(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.queryCard(["cards", id]);
        });
      }
      bySet(setCode, collectorNumber, lang) {
        return __awaiter(this, void 0, void 0, function* () {
          const path = ["cards", typeof setCode === "string" ? setCode : setCode.code, collectorNumber];
          if (lang)
            path.push(lang);
          return this.queryCard(path);
        });
      }
      byMultiverseId(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.queryCard(["cards/multiverse", id]);
        });
      }
      byMtgoId(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.queryCard(["cards/mtgo", id]);
        });
      }
      byArenaId(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.queryCard(["cards/arena", id]);
        });
      }
      byTcgPlayerId(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.queryCard(["cards/tcgplayer", id]);
        });
      }
      byCardmarketId(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.queryCard(["cards/cardmarket", id]);
        });
      }
      random(query) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.queryCard("cards/random", { q: query });
        });
      }
      search(query, options) {
        const emitter = new MagicEmitter_1.default().map(Card.construct);
        this.queryPage(emitter, "cards/search", Object.assign({ q: query }, typeof options === "number" ? { page: options } : options)).catch((err) => emitter.emit("error", err));
        return emitter;
      }
      autoCompleteName(name) {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("cards/autocomplete", { q: name })).data;
        });
      }
      collection(...identifiers) {
        const emitter = new MagicEmitter_1.default().map(Card.construct);
        void this.processCollection(emitter, identifiers);
        return emitter;
      }
      queryCard(apiPath, query, post) {
        return __awaiter(this, void 0, void 0, function* () {
          return yield this.query(apiPath, query, post).then(Card.construct);
        });
      }
      processCollection(emitter, identifiers) {
        return __awaiter(this, void 0, void 0, function* () {
          for (let i = 0; i < identifiers.length; i += 75) {
            if (emitter.cancelled)
              break;
            const collectionSection = { identifiers: identifiers.slice(i, i + 75) };
            const { data, not_found } = yield this.query("cards/collection", void 0, collectionSection);
            emitter.emitAll("not_found", ...not_found !== null && not_found !== void 0 ? not_found : []);
            if (!emitter.cancelled)
              emitter.emitAll("data", ...data);
            if (emitter.willCancelAfterPage)
              emitter.cancel();
          }
          if (!emitter.cancelled)
            emitter.emit("end");
          emitter.emit("done");
        });
      }
    };
    __decorate([
      Cached_1.default
    ], Cards.prototype, "byName", null);
    __decorate([
      Cached_1.default
    ], Cards.prototype, "byId", null);
    __decorate([
      Cached_1.default
    ], Cards.prototype, "bySet", null);
    __decorate([
      Cached_1.default
    ], Cards.prototype, "byMultiverseId", null);
    __decorate([
      Cached_1.default
    ], Cards.prototype, "byMtgoId", null);
    __decorate([
      Cached_1.default
    ], Cards.prototype, "byArenaId", null);
    __decorate([
      Cached_1.default
    ], Cards.prototype, "byTcgPlayerId", null);
    __decorate([
      Cached_1.default
    ], Cards.prototype, "byCardmarketId", null);
    __decorate([
      Cached_1.default
    ], Cards.prototype, "autoCompleteName", null);
    exports.default = new Cards();
  }
});

// node_modules/scryfall-sdk/out/api/Sets.js
var require_Sets = __commonJS({
  "node_modules/scryfall-sdk/out/api/Sets.js"(exports) {
    "use strict";
    var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Set = void 0;
    var IScry_1 = require_IScry();
    var Cached_1 = require_Cached();
    var MagicQuerier_1 = require_MagicQuerier();
    var SetType;
    (function(SetType2) {
      SetType2[SetType2["core"] = 0] = "core";
      SetType2[SetType2["expansion"] = 1] = "expansion";
      SetType2[SetType2["masters"] = 2] = "masters";
      SetType2[SetType2["alchemy"] = 3] = "alchemy";
      SetType2[SetType2["masterpiece"] = 4] = "masterpiece";
      SetType2[SetType2["arsenal"] = 5] = "arsenal";
      SetType2[SetType2["from_the_vault"] = 6] = "from_the_vault";
      SetType2[SetType2["spellbook"] = 7] = "spellbook";
      SetType2[SetType2["premium_deck"] = 8] = "premium_deck";
      SetType2[SetType2["duel_deck"] = 9] = "duel_deck";
      SetType2[SetType2["draft_innovation"] = 10] = "draft_innovation";
      SetType2[SetType2["treasure_chest"] = 11] = "treasure_chest";
      SetType2[SetType2["commander"] = 12] = "commander";
      SetType2[SetType2["planechase"] = 13] = "planechase";
      SetType2[SetType2["archenemy"] = 14] = "archenemy";
      SetType2[SetType2["vanguard"] = 15] = "vanguard";
      SetType2[SetType2["funny"] = 16] = "funny";
      SetType2[SetType2["starter"] = 17] = "starter";
      SetType2[SetType2["box"] = 18] = "box";
      SetType2[SetType2["promo"] = 19] = "promo";
      SetType2[SetType2["token"] = 20] = "token";
      SetType2[SetType2["memorabilia"] = 21] = "memorabilia";
      SetType2[SetType2["minigame"] = 22] = "minigame";
    })(SetType || (SetType = {}));
    var Scry;
    var Set = class _Set {
      static construct(set) {
        Object.setPrototypeOf(set, _Set.prototype);
        return set;
      }
      getCards(options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
          if (!options)
            return (_a = this[IScry_1.SYMBOL_CARDS]) !== null && _a !== void 0 ? _a : this[IScry_1.SYMBOL_CARDS] = yield this.search(`s:${this.code}`, { order: "set" });
          return this.search(`s:${this.code}`, Object.assign({ order: "set" }, options));
        });
      }
      search(query, options) {
        return Scry.Cards.search(`s:${this.code} ${query}`, options).map((card) => {
          var _a;
          (_a = card[IScry_1.SYMBOL_SET]) !== null && _a !== void 0 ? _a : card[IScry_1.SYMBOL_SET] = this;
          return card;
        }).waitForAll();
      }
    };
    exports.Set = Set;
    var Sets = class extends MagicQuerier_1.default {
      set Scry(scry) {
        Scry = scry;
      }
      all() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("sets")).data.map(Set.construct);
        });
      }
      byCode(code) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.querySet(["sets", code]);
        });
      }
      byId(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.querySet(["sets", id]);
        });
      }
      byTcgPlayerId(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.querySet(["sets/tcgplayer", id]);
        });
      }
      /**
       * @param fuzzy This parameter only works if you've previously set a fuzzy comparer with `Scry.setFuzzySearch`. Otherwise it only returns exact matches.
       */
      byName(name, fuzzy) {
        return __awaiter(this, void 0, void 0, function* () {
          const all = yield this.all();
          let result;
          if (fuzzy && IScry_1.IScry.fuzzySearch)
            result = IScry_1.IScry.fuzzySearch(name, all, "name");
          else {
            name = name.toLowerCase();
            result = all.find((set) => set.name.toLowerCase() === name);
          }
          if (result)
            return result;
          const error = new Error(`No sets found matching “${name}”`);
          error.status = 404;
          error.code = "not_found";
          throw error;
        });
      }
      querySet(apiPath, query, post) {
        return __awaiter(this, void 0, void 0, function* () {
          return yield this.query(apiPath, query, post).then(Set.construct);
        });
      }
    };
    __decorate([
      Cached_1.default
    ], Sets.prototype, "all", null);
    __decorate([
      Cached_1.default
    ], Sets.prototype, "byCode", null);
    __decorate([
      Cached_1.default
    ], Sets.prototype, "byId", null);
    __decorate([
      Cached_1.default
    ], Sets.prototype, "byTcgPlayerId", null);
    __decorate([
      Cached_1.default
    ], Sets.prototype, "byName", null);
    exports.default = new Sets();
  }
});

// node_modules/scryfall-sdk/out/api/BulkData.js
var require_BulkData = __commonJS({
  "node_modules/scryfall-sdk/out/api/BulkData.js"(exports) {
    "use strict";
    var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Cached_1 = require_Cached();
    var MagicQuerier_1 = require_MagicQuerier();
    var axios;
    if (typeof fetch === "undefined") {
      try {
        axios = __require("axios").default;
      } catch (_a) {
      }
    }
    var BulkDataTypes;
    (function(BulkDataTypes2) {
      BulkDataTypes2[BulkDataTypes2["oracle_cards"] = 0] = "oracle_cards";
      BulkDataTypes2[BulkDataTypes2["unique_artwork"] = 1] = "unique_artwork";
      BulkDataTypes2[BulkDataTypes2["default_cards"] = 2] = "default_cards";
      BulkDataTypes2[BulkDataTypes2["all_cards"] = 3] = "all_cards";
      BulkDataTypes2[BulkDataTypes2["rulings"] = 4] = "rulings";
    })(BulkDataTypes || (BulkDataTypes = {}));
    var BulkData = class extends MagicQuerier_1.default {
      /**
       * Returns a stream for the given bulk data if it has been updated since the last download time. If it hasn't, returns `undefined`
       * @param lastDownload The last time this bulk data was downloaded. If you want to re-download the data regardless of
       * the last time it was downloaded, set this to `0`.
       */
      downloadByType(type, lastDownload) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.download(type, lastDownload);
        });
      }
      /**
       * Returns a stream for the given bulk data if it has been updated since the last download time. If it hasn't, returns `undefined`
       * @param lastDownload The last time this bulk data was downloaded. If you want to re-download the data regardless of
       * the last time it was downloaded, set this to `0`.
       */
      downloadById(id, lastDownload) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.download(id, lastDownload);
        });
      }
      ////////////////////////////////////
      // Definitions
      //
      definitions() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("bulk-data")).data;
        });
      }
      definitionByType(type) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.definition(type);
        });
      }
      definitionById(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.definition(id);
        });
      }
      ////////////////////////////////////
      // Internals
      //
      download(idOrType, lastDownload) {
        return __awaiter(this, void 0, void 0, function* () {
          const definition = yield this.definition(idOrType);
          if (new Date(lastDownload).getTime() > new Date(definition.updated_at).getTime())
            return void 0;
          if (axios) {
            const result = yield axios.request({
              method: "GET",
              url: definition.download_uri,
              responseType: "stream"
            });
            return result.data;
          } else {
            const result = yield fetch(definition.download_uri, {
              method: "GET"
            });
            return result.body;
          }
        });
      }
      definition(idOrType) {
        return this.query(["bulk-data", idOrType]);
      }
    };
    __decorate([
      Cached_1.default
    ], BulkData.prototype, "definitions", null);
    __decorate([
      Cached_1.default
    ], BulkData.prototype, "definitionByType", null);
    __decorate([
      Cached_1.default
    ], BulkData.prototype, "definitionById", null);
    exports.default = new BulkData();
  }
});

// node_modules/scryfall-sdk/out/api/Catalog.js
var require_Catalog = __commonJS({
  "node_modules/scryfall-sdk/out/api/Catalog.js"(exports) {
    "use strict";
    var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Cached_1 = require_Cached();
    var MagicQuerier_1 = require_MagicQuerier();
    var Catalog = class extends MagicQuerier_1.default {
      cardNames() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/card-names")).data;
        });
      }
      artistNames() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/artist-names")).data;
        });
      }
      wordBank() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/word-bank")).data;
        });
      }
      creatureTypes() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/creature-types")).data;
        });
      }
      planeswalkerTypes() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/planeswalker-types")).data;
        });
      }
      landTypes() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/land-types")).data;
        });
      }
      artifactTypes() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/artifact-types")).data;
        });
      }
      enchantmentTypes() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/enchantment-types")).data;
        });
      }
      spellTypes() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/spell-types")).data;
        });
      }
      powers() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/powers")).data;
        });
      }
      toughnesses() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/toughnesses")).data;
        });
      }
      loyalties() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/loyalties")).data;
        });
      }
      watermarks() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/watermarks")).data;
        });
      }
      keywordAbilities() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/keyword-abilities")).data;
        });
      }
      keywordActions() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/keyword-actions")).data;
        });
      }
      abilityWords() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/ability-words")).data;
        });
      }
      supertypes() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("catalog/supertypes")).data;
        });
      }
    };
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "cardNames", null);
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "artistNames", null);
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "wordBank", null);
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "creatureTypes", null);
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "planeswalkerTypes", null);
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "landTypes", null);
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "artifactTypes", null);
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "enchantmentTypes", null);
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "spellTypes", null);
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "powers", null);
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "toughnesses", null);
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "loyalties", null);
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "watermarks", null);
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "keywordAbilities", null);
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "keywordActions", null);
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "abilityWords", null);
    __decorate([
      Cached_1.default
    ], Catalog.prototype, "supertypes", null);
    exports.default = new Catalog();
  }
});

// node_modules/scryfall-sdk/out/api/Migrations.js
var require_Migrations = __commonJS({
  "node_modules/scryfall-sdk/out/api/Migrations.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MigrationStrategy = void 0;
    var MagicEmitter_1 = require_MagicEmitter();
    var MagicQuerier_1 = require_MagicQuerier();
    var MigrationStrategy;
    (function(MigrationStrategy2) {
      MigrationStrategy2["Merge"] = "merge";
      MigrationStrategy2["Delete"] = "delete";
    })(MigrationStrategy = exports.MigrationStrategy || (exports.MigrationStrategy = {}));
    var Migrations = class extends MagicQuerier_1.default {
      all(page = 1) {
        const emitter = new MagicEmitter_1.default();
        this.queryPage(emitter, "migrations", {}, page).catch((err) => emitter.emit("error", err));
        return emitter;
      }
      byId(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.query(["migrations", id]);
        });
      }
    };
    exports.default = new Migrations();
  }
});

// node_modules/scryfall-sdk/out/api/Rulings.js
var require_Rulings = __commonJS({
  "node_modules/scryfall-sdk/out/api/Rulings.js"(exports) {
    "use strict";
    var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Cached_1 = require_Cached();
    var MagicQuerier_1 = require_MagicQuerier();
    var Rulings = class extends MagicQuerier_1.default {
      byId(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query(["cards", id, "rulings"])).data;
        });
      }
      bySet(setCode, collectorNumber) {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query(["cards", setCode, `${collectorNumber}`, "rulings"])).data;
        });
      }
      byMultiverseId(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query(["cards/multiverse", id, "rulings"])).data;
        });
      }
      byMtgoId(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query(["cards/mtgo", id, "rulings"])).data;
        });
      }
      byArenaId(id) {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query(["cards/arena", id, "rulings"])).data;
        });
      }
    };
    __decorate([
      Cached_1.default
    ], Rulings.prototype, "byId", null);
    __decorate([
      Cached_1.default
    ], Rulings.prototype, "bySet", null);
    __decorate([
      Cached_1.default
    ], Rulings.prototype, "byMultiverseId", null);
    __decorate([
      Cached_1.default
    ], Rulings.prototype, "byMtgoId", null);
    __decorate([
      Cached_1.default
    ], Rulings.prototype, "byArenaId", null);
    exports.default = new Rulings();
  }
});

// node_modules/scryfall-sdk/out/api/Symbology.js
var require_Symbology = __commonJS({
  "node_modules/scryfall-sdk/out/api/Symbology.js"(exports) {
    "use strict";
    var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Cached_1 = require_Cached();
    var MagicQuerier_1 = require_MagicQuerier();
    var Symbology = class extends MagicQuerier_1.default {
      all() {
        return __awaiter(this, void 0, void 0, function* () {
          return (yield this.query("symbology")).data;
        });
      }
      parseMana(shorthand) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.query("symbology/parse-mana", { cost: shorthand });
        });
      }
    };
    __decorate([
      Cached_1.default
    ], Symbology.prototype, "all", null);
    __decorate([
      Cached_1.default
    ], Symbology.prototype, "parseMana", null);
    exports.default = new Symbology();
  }
});

// node_modules/scryfall-sdk/out/Scry.js
var require_Scry = __commonJS({
  "node_modules/scryfall-sdk/out/Scry.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setFuzzySearch = exports.setCacheLimit = exports.setCacheDuration = exports.clearCache = exports.setTimeout = exports.setRetry = exports.Symbology = exports.Sets = exports.Rulings = exports.Migrations = exports.Catalog = exports.Cards = exports.BulkData = void 0;
    var Cards_1 = require_Cards();
    var Sets_1 = require_Sets();
    var IScry_1 = require_IScry();
    var Cached_1 = require_Cached();
    var MagicQuerier_1 = require_MagicQuerier();
    __exportStar(require_BulkData(), exports);
    var BulkData_1 = require_BulkData();
    Object.defineProperty(exports, "BulkData", { enumerable: true, get: function() {
      return BulkData_1.default;
    } });
    __exportStar(require_Cards(), exports);
    var Cards_2 = require_Cards();
    Object.defineProperty(exports, "Cards", { enumerable: true, get: function() {
      return Cards_2.default;
    } });
    __exportStar(require_Catalog(), exports);
    var Catalog_1 = require_Catalog();
    Object.defineProperty(exports, "Catalog", { enumerable: true, get: function() {
      return Catalog_1.default;
    } });
    __exportStar(require_Migrations(), exports);
    var Migrations_1 = require_Migrations();
    Object.defineProperty(exports, "Migrations", { enumerable: true, get: function() {
      return Migrations_1.default;
    } });
    __exportStar(require_Rulings(), exports);
    var Rulings_1 = require_Rulings();
    Object.defineProperty(exports, "Rulings", { enumerable: true, get: function() {
      return Rulings_1.default;
    } });
    __exportStar(require_Sets(), exports);
    var Sets_2 = require_Sets();
    Object.defineProperty(exports, "Sets", { enumerable: true, get: function() {
      return Sets_2.default;
    } });
    __exportStar(require_Symbology(), exports);
    var Symbology_1 = require_Symbology();
    Object.defineProperty(exports, "Symbology", { enumerable: true, get: function() {
      return Symbology_1.default;
    } });
    __exportStar(require_IScry(), exports);
    Cards_1.default["Scry"] = exports;
    Sets_1.default["Scry"] = exports;
    function setRetry(attempts, timeout, canRetry) {
      MagicQuerier_1.default.retry = { attempts, timeout, canRetry };
    }
    exports.setRetry = setRetry;
    function setTimeout2(timeout) {
      MagicQuerier_1.default.timeout = Math.max(MagicQuerier_1.minimumRequestTimeout, timeout);
    }
    exports.setTimeout = setTimeout2;
    function clearCache() {
      Cached_1.default.clear();
    }
    exports.clearCache = clearCache;
    function setCacheDuration(ms) {
      Cached_1.default.setDuration(ms);
    }
    exports.setCacheDuration = setCacheDuration;
    function setCacheLimit(amount) {
      Cached_1.default.setLimit(amount);
    }
    exports.setCacheLimit = setCacheLimit;
    function setFuzzySearch(search) {
      IScry_1.IScry.fuzzySearch = search;
    }
    exports.setFuzzySearch = setFuzzySearch;
  }
});
export default require_Scry();
//# sourceMappingURL=scryfall-sdk.js.map

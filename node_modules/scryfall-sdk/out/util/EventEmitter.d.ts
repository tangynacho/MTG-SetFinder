type NodeEventEmitter = import("node:events");
type Listener = (...args: any[]) => void;
declare class EventEmitter implements NodeEventEmitter {
    private _maxListeners;
    private readonly _listeners;
    addListener(eventName: string | symbol, listener: Listener): this;
    prependListener(eventName: string | symbol, listener: Listener): this;
    removeListener(eventName: string | symbol, listener: Listener): this;
    on(eventName: string | symbol, listener: Listener): this;
    once(eventName: string | symbol, listener: Listener): this;
    prependOnceListener(eventName: string | symbol, listener: Listener): this;
    off(eventName: string | symbol, listener: Listener): this;
    removeAllListeners(event?: string | symbol | undefined): this;
    emit(eventName: string | symbol, ...args: any[]): boolean;
    setMaxListeners(n: number): this;
    getMaxListeners(): number;
    listeners(eventName: string | symbol): Function[];
    rawListeners(eventName: string | symbol): Function[];
    listenerCount(eventName: string | symbol): number;
    eventNames(): (string | symbol)[];
}
export default EventEmitter;

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MigrationStrategy = void 0;
const MagicEmitter_1 = require("../util/MagicEmitter");
const MagicQuerier_1 = require("../util/MagicQuerier");
var MigrationStrategy;
(function (MigrationStrategy) {
    /**
     * You should update your records to replace the given old Scryfall ID with the new ID. The old ID is being discarded, and an existing record should be used to replace all instances of it.
     */
    MigrationStrategy["Merge"] = "merge";
    /**
     * The given UUID is being discarded, and no replacement data is being provided. This likely means the old records are fully invalid. This migration exists to provide evidence that cards were removed from Scryfallâ€™s database.
     */
    MigrationStrategy["Delete"] = "delete";
})(MigrationStrategy = exports.MigrationStrategy || (exports.MigrationStrategy = {}));
class Migrations extends MagicQuerier_1.default {
    all(page = 1) {
        const emitter = new MagicEmitter_1.default();
        this.queryPage(emitter, "migrations", {}, page)
            .catch(err => emitter.emit("error", err));
        return emitter;
    }
    byId(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.query(["migrations", id]);
        });
    }
}
exports.default = new Migrations;
